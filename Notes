Traditional development process vs Behavioral Driven Develpment
------------------------------------------------

Company --> Project (Client)

SDLC  --> End to end process of creation of sotware

WaterFall, V-V, Iterative and Agile

TDD:-

> Stack holder --> Tells --> Requirement --> PO/BA

> PO/BA --> Requirement --> Recived from SH --> DOCS (BRS/SRS/HLD/LLD) --> US

> Dev --> Code

> Tester (Qa) --> Write Manual test cases

> Finish the product

> Technical writer --> He will prepare documentation --> Confluence page.

BDD:-

> SH + PO/BA (Collarboation)

> PO/BA + Dev + QA  (3 Amigos)

> Agreed upon the requirements which should be defined as English formatted scenarios.

Given When And Then But So (Gherkin DSL)

Why?
What?
How?

Exampes

Requirements

> Dev --> write the code based on Scenarios
> QA- > Write the manual test cases based on Scenarios

> Automation Testing --> (Scenarios) --> Write Scripts (Cucumber / Jbehave / SpecFlow)

> Finish the product

> TW --> Docs

------------------->

Hybrid

---------------------------------->
Test driven development vs Behavioral Driven development (TDD vs BDD)?
-------------------------------------------------
TDD:-

Devlopment centric approach

Developer (Test cases) --> Unit test cases.

--> Whitebox testing

Product (
Amazon) --> Developer (Code)

Dev --> Code (Write test cases)

Dev --> Code -->Muliple Java File --> WAR (Maven/Ant/Gradle) --> Deploy --> 
Tom cat --> APP --> QA --> Test cases --> Against App --> Bug --> Dev 

Junit , TestNG , Nunit, Pyunit

US --> HLR --> Test cases (Dev/QA) --> Execute --> FAILED --> Development Code

--> Rreun --> Failed --> Refactor --> Pass --> Cycles goes

BDD:-
----------

Scenarios (3 amigos) -->Execute --> Fail --> Code --> Exe --> Fail --> Refactor 

--> Execute --> Pass --> Cycles goes on

































Cucumber:-
--------------